DECLARE
  k_host            CONSTANT VARCHAR2(100) := 'domain.com'; --outlook.com
  k_port            CONSTANT INTEGER       := 587; --outlook ports
  k_wallet_path     CONSTANT VARCHAR2(100) := 'file:D:\DatabaseFolder\Administrator\admin\oracle_SID\walletName';
  k_wallet_password CONSTANT VARCHAR2(100) := 'WalletPassword';
  k_domain          CONSTANT VARCHAR2(100) := 'localhost';
  k_username        CONSTANT VARCHAR2(100) := 'email@from.com';
  k_password        CONSTANT VARCHAR2(100) := 'EmailPassword';
  k_sender          CONSTANT VARCHAR2(100) := 'send@byemail.com';
  k_recipient       CONSTANT VARCHAR2(100) := 'to@email.com';
  k_subject         CONSTANT VARCHAR2(4000) := :subject;
  p_html_msg        CONSTANT varchar2(4000):=  :EMAILBODY;
  p_html_sig        CONSTANT varchar2(4000):=  :MYEmail_SIGNATURE;
  v_Filename         VARCHAR2(200);
  v_Len              NUMBER;
  v_Index            NUMBER;
  l_conn    utl_smtp.connection;
  l_reply   utl_smtp.reply;
  l_replies utl_smtp.replies;
  l_boundary    VARCHAR2(150) := '----=*#abc1234321cba#*=';
  /* Fetch the PDF (BLOB) from EMP_DOCS table */
CURSOR Cur_empPdf IS
    SELECT FILENAME, ATTACHMENT, MIMETYPE
FROM Attachment_table
WHERE Email_ID = :EMAIL_ID;
  l_Blob        BLOB;
  
BEGIN 

  dbms_output.put_line('utl_smtp.open_connection');
  
  l_reply := utl_smtp.open_connection
             ( host                          => k_host
             , port                          => k_port
             , c                             => l_conn
             , wallet_path                   => k_wallet_path
             , wallet_password               => k_wallet_password
             , secure_connection_before_smtp => FALSE
             );
 
  IF l_reply.code != 220
  THEN
    raise_application_error(-20000, 'utl_smtp.open_connection: '||l_reply.code||' - '||l_reply.text);
  END IF;
 
  dbms_output.put_line('utl_smtp.ehlo');
  
  l_replies := utl_smtp.ehlo(l_conn, k_domain);
  
  FOR ri IN 1..l_replies.COUNT
  LOOP
    dbms_output.put_line(l_replies(ri).code||' - '||l_replies(ri).text);
  END LOOP;
 
  dbms_output.put_line('utl_smtp.starttls');
  
  l_reply := utl_smtp.starttls(l_conn);
 
  IF l_reply.code != 220
  THEN
    raise_application_error(-20000, 'utl_smtp.starttls: '||l_reply.code||' - '||l_reply.text);
  END IF;
 
  dbms_output.put_line('utl_smtp.ehlo');
  
  l_replies := utl_smtp.ehlo(l_conn, k_domain);
  
  FOR ri IN 1..l_replies.COUNT
  LOOP
    dbms_output.put_line(l_replies(ri).code||' - '||l_replies(ri).text);
  END LOOP;
  
  dbms_output.put_line('utl_smtp.auth');
  
  l_reply := utl_smtp.auth(l_conn, k_username, k_password, utl_smtp.all_schemes);
 
  IF l_reply.code != 235
  THEN
    raise_application_error(-20000, 'utl_smtp.auth: '||l_reply.code||' - '||l_reply.text);
  END IF;

  dbms_output.put_line('utl_smtp.mail');
  
  l_reply := utl_smtp.mail(l_conn, k_sender);
  
  IF l_reply.code != 250
  THEN
    raise_application_error(-20000, 'utl_smtp.mail: '||l_reply.code||' - '||l_reply.text);
  END IF;
 
  dbms_output.put_line('utl_smtp.rcpt');
  
  l_reply := utl_smtp.rcpt(l_conn, k_recipient);
  
  IF l_reply.code NOT IN (250, 251)
  THEN
    raise_application_error(-20000, 'utl_smtp.rcpt: '||l_reply.code||' - '||l_reply.text);
  END IF;
 
  dbms_output.put_line('utl_smtp.open_data');
  
  l_reply := utl_smtp.open_data(l_conn);
  
  IF l_reply.code != 354
  THEN
    raise_application_error(-20000, 'utl_smtp.open_data: '||l_reply.code||' - '||l_reply.text);
  END IF;
  
  

  dbms_output.put_line('utl_smtp.write_data');
  
  utl_smtp.write_data(l_conn, 'From: '||k_sender||utl_tcp.crlf);
  utl_smtp.write_data(l_conn, 'To: '||k_recipient||utl_tcp.crlf);
  utl_smtp.write_data(l_conn, 'Subject: '||k_subject||utl_tcp.crlf);
  UTL_SMTP.write_data(l_conn, 'Content-Type: multipart/mixed; boundary="' || l_boundary || '"' || UTL_TCP.crlf || UTL_TCP.crlf);
  UTL_SMTP.write_data(l_conn, 'MIME-Version: 1.0' || UTL_TCP.crlf);
 
  
  
  IF p_html_msg IS NOT NULL THEN
    UTL_SMTP.write_data(l_conn, '--' || l_boundary || UTL_TCP.crlf);
    UTL_SMTP.write_data(l_conn, 'Content-Type: text/html; charset=UTF-8' || UTL_TCP.crlf || UTL_TCP.crlf);

    UTL_SMTP.write_raw_data(l_conn, utl_raw.cast_to_raw(p_html_msg));
    UTL_SMTP.write_raw_data(l_conn, utl_raw.cast_to_raw(p_html_sig));
    UTL_SMTP.write_data(l_conn, UTL_TCP.crlf || UTL_TCP.crlf);
  END IF;
  
  Dbms_Lob.Createtemporary(Lob_Loc => l_Blob,
                           Cache   => TRUE,
                           Dur     => Dbms_Lob.Call);
  
FOR c IN Cur_empPdf LOOP
  
    l_Blob := c.ATTACHMENT;
    Utl_Smtp.Write_Data(l_Conn,
                        '--' || l_Boundary || Utl_Tcp.Crlf);
    Utl_Smtp.Write_Data(l_Conn,
                        'Content-Type: ' || c.MIMETYPE || '; name="' ||
                        c.Filename || '"' || Utl_Tcp.Crlf);
    Utl_Smtp.Write_Data(l_Conn,
                        'Content-Transfer-Encoding: base64' || Utl_Tcp.Crlf);
    Utl_Smtp.Write_Data(l_Conn,
                        'Content-Disposition: attachment; filename="' ||
                        v_Filename || '"' || Utl_Tcp.Crlf || Utl_Tcp.Crlf);
  
    FOR i IN 0 .. Trunc((Dbms_Lob.Getlength(l_Blob) - 1) / 12000) LOOP
      Utl_Smtp.Write_Data(l_Conn,
                          Utl_Raw.Cast_To_Varchar2(Utl_Encode.Base64_Encode(Dbms_Lob.Substr(l_Blob,
                                                                                            12000,
                                                                                            i *
                                                                                            12000 + 1))));
    END LOOP;
  
    Utl_Smtp.Write_Data(l_Conn,
                        Utl_Tcp.Crlf || Utl_Tcp.Crlf);
    Utl_Smtp.Write_Data(l_Conn,
                        '--' || l_Boundary || '--' || Utl_Tcp.Crlf);
    EXIT;
  END LOOP;
  
  dbms_output.put_line('utl_smtp.close_data');
  
  l_reply := utl_smtp.close_data(l_conn);
  
  IF l_reply.code != 250
  THEN
    raise_application_error(-20000, 'utl_smtp.close_data: '||l_reply.code||' - '||l_reply.text);
  END IF;
  
  dbms_output.put_line('utl_smtp.quit');
  
  l_reply := utl_smtp.quit(l_conn);
  
  IF l_reply.code != 221
  THEN
    raise_application_error(-20000, 'utl_smtp.quit: '||l_reply.code||' - '||l_reply.text);
  END IF;
  
 
EXCEPTION
  WHEN    utl_smtp.transient_error
       OR utl_smtp.permanent_error
  THEN
    BEGIN
      utl_smtp.quit(l_conn);
    EXCEPTION
      WHEN    utl_smtp.transient_error
           OR utl_smtp.permanent_error
      THEN
        NULL;
    END;
    
    raise_application_error(-20000, 'Failed to send mail due to the following error: '||SQLERRM);
    
END;
